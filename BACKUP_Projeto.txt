-------------------------------------- IF ------------------------------
`include "PC.v"
`include "somadorPC4.v"
`include "memoria_instrucao.v"
`include "muxIF.v"

module IF();

reg clock;
reg [31:0]endereco_desvio;
reg PCSrc;


wire [31:0]saidaPC;
wire [31:0]saidaPC4;
wire [31:0]saidaMem;
wire [31:0]saidaMux;

initial begin
  $monitor("clock = %b \n saida mux = %b \n saida PC = %b \n saida PC4 = %b \n Instrucao = %b", clock, saidaMux,
  saidaPC, saidaPC4, saidaMem);
  clock = 0;
  PCSrc = 0;
  endereco_desvio = 0;
  #10 PCSrc = 0;
  #35 clock = 0;
  $finish;
end

always begin
  #5 clock = ~clock;
end

muxIF mux(.clock(clock), .PCSrc(PCSrc), .entradaPC4_mux(saidaPC4), .sinal_deslocado(endereco_desvio), .resposta(saidaMux));

PC pc(.clock(clock), .entrada(saidaMux), .saida(saidaPC));

somadorPC4 pc4(.clock(clock), .PC(saidaPC), .PC4(saidaPC4));

memoria_instrucao memIn(.clock(clock), .endereco(saidaPC4), .instrucaoOut(saidaMem));

endmodule

---------------------------------------------------------------------------------
------------------------------------------ID-------------------------------------

`include "banco_registradores.v"
`include "extensor16_32.v"

module ID(clock, instrucao, RD, EscReg, WB, saida1, saida2, sinal32saida);

input clock;
input [31:0]instrucao;
input [4:0]RD;
input EscReg;
input [31:0]WB;

reg [4:0]reg1;
output reg [4:0]reg2;
output reg [4:0]reg3;
reg [15:0]sinal16entrada;

output [31:0]saida1;
output [31:0]saida2;
output [31:0]sinal32saida;

initial begin
  reg1 = instrucao[25:21];
  reg2 = instrucao[20:16];
  reg3 = instrucao[15:11];
  sinal16entrada = instrucao[15:10];
end

/*initial begin
    $monitor("clock = %b \n registrador1 = %b \n registrador2 = %b \n registradordestino = %b \n dado escrito = %b \n dado 1 = %b, dado 2 = %b, sinal extendido = %b", clock, reg1, reg2, RD, WB, saida1, saida2, sinal32saida);
    clock = 0;
    EscReg = 0;
    //#5 instrucao = 32'b00000000001000100000000000000001;
    #5 RD = 32'b00000;
    //WB = 32'b00000000001000100000000000000000;
    
    #40 $finish;
end

always begin
  #5 clock = ~clock;
end*/

banco_registradores banco(.clock(clock), .RegWrite(EscReg), .r1(reg1), .r2(reg2), .r3(RD), .dado_escrita(WB), .dado_lido1(saida1), .dado_lido2(saida2));

extensor16_32 extensor(.clock(clock), .sinal16(sinal16entrada), .sinal32(sinal32saida));

endmodule
---------------------------------------------------------------------------------
-------------------------------------EX------------------------------------------
`include "muxALUSrc.v"
`include "muxRegDest.v"
`include "somador.v"
`include "deslocamento_esquerda.v"
`include "ALUControl.v"
`include "ULA.v"

module EX();

reg clock;
//entradas do módulo
reg [31:0]PC4;
reg [31:0]dado1ALU;
reg [31:0]dado2ALU;
reg [31:0]endereco;
reg [4:0]reg2;
reg [4:0]reg3;
reg ALUSrc_EX;
reg [5:0]functEx;
reg [1:0]ALUOpEx;
reg regDestEx;

//saidas dos modulos internos
wire [31:0]enderecoSHIFT;
wire [31:0]saidaMuxALUSrc;
wire [2:0]saidaULAControl;
wire [4:0]RD;
wire [31:0]saidaSomador;
wire [31:0]saidaULA;
wire zeroEx;

//nitial begin
//  functEx = endereco[5:0];
//end

initial begin
  $monitor("clock = %b \n dado1 = %b \n dado2 = %b \n endereco = %b \n endereco deslocado = %b \n reg2 = %b \n reg3 = %b \n ALUSrc = %b \n funct = %b \n ALUOp = %b \n regDest = %b \n PC4 = %b \n saida somador = %b \n saida ULA = %b \n saida reg dest = %b \n", clock, dado1ALU, dado2ALU, endereco, enderecoSHIFT, reg2, reg3, ALUSrc_EX, functEx, ALUOpEx, regDestEx, PC4, saidaSomador, saidaULA, RD);
          clock = 0;
          #5 PC4 =  32'b00000000000000000000000001010101;
          ALUSrc_EX = 0;
          ALUOpEx = 2'b00;
          regDestEx = 0;
          reg2 = 5'b00010;
          reg3 = 5'b00011;
          dado1ALU = 32'b00000000000000000000000000000001;
          dado2ALU = 32'b00000000000000000000000000000001;
          endereco = 32'b00000000000000000000000000100000;
          functEx = endereco[5:0];
          #20 clock = 0;
          $finish;
end

initial begin
  #5 clock = ~clock;
end

deslocamento_esquerda desloca(.clock(clock), .sinal_original(endereco), .sinal_deslocado(enderecoSHIFT));

somador soma(.clock(clock), .entrada1(PC4), .entrada2(enderecoSHIFT), .resultado(saidaSomador));

muxALUSrc muxALUSrcEx(.clock(clock), .dado1(dado2ALU), .dado2(endereco), .ALUSrc(ALUSrc_EX), .saida(saidaMuxALUSrc));

ALUControl ALUCtrl(.clock(clock), .funct(functEx), .ALUOp(ALUOpEx), .saida(saidaULAControl));

muxRegDest muxRD(.clock(clock), .r1(reg2), .r2(reg3), .regDest(regDestEx), .saida(RD));

ULA ulaEx(.clock(clock), .entrada1(dado1ALU), .entrada2(dado2ALU), .ALUControl(saidaULAControl), .zero(zeroEx), .resultado(saidaULA));




endmodule
